{"abiRumAccount.json":"{\"address\": \"0x54AeAEe174aC273d01aa5038C016281040E7b1dB\",\"abi\": [{\"inputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"constructor\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": false,\"internalType\": \"address\",\"name\": \"user\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"string\",\"name\": \"payment_provider\",\"type\": \"string\"},{\"indexed\": false,\"internalType\": \"string\",\"name\": \"payment_account\",\"type\": \"string\"},{\"indexed\": false,\"internalType\": \"string\",\"name\": \"meta\",\"type\": \"string\"},{\"indexed\": false,\"internalType\": \"string\",\"name\": \"memo\",\"type\": \"string\"}],\"name\": \"Bind\",\"type\": \"event\"},{\"constant\": true,\"inputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"},{\"internalType\": \"string\",\"name\": \"\",\"type\": \"string\"}],\"name\": \"account\",\"outputs\": [{\"internalType\": \"address\",\"name\": \"user\",\"type\": \"address\"},{\"internalType\": \"string\",\"name\": \"payment_provider\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"payment_account\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"meta\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"memo\",\"type\": \"string\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"},{\"constant\": true,\"inputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"}],\"name\": \"managers\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"},{\"constant\": true,\"inputs\": [],\"name\": \"owner\",\"outputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"},{\"constant\": true,\"inputs\": [{\"internalType\": \"string\",\"name\": \"\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"\",\"type\": \"string\"}],\"name\": \"userAddress\",\"outputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"},{\"constant\": false,\"inputs\": [{\"internalType\": \"address\",\"name\": \"newOwner\",\"type\": \"address\"}],\"name\": \"changeOwner\",\"outputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"constant\": false,\"inputs\": [{\"internalType\": \"address\",\"name\": \"manager\",\"type\": \"address\"}],\"name\": \"addManager\",\"outputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"constant\": false,\"inputs\": [{\"internalType\": \"address\",\"name\": \"manager\",\"type\": \"address\"}],\"name\": \"removeManager\",\"outputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"constant\": false,\"inputs\": [{\"internalType\": \"address\",\"name\": \"user\",\"type\": \"address\"},{\"internalType\": \"string\",\"name\": \"payment_provider\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"payment_account\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"meta\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"memo\",\"type\": \"string\"}],\"name\": \"bind\",\"outputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"constant\": true,\"inputs\": [{\"internalType\": \"address\",\"name\": \"user\",\"type\": \"address\"}],\"name\": \"accounts\",\"outputs\": [{\"components\": [{\"internalType\": \"address\",\"name\": \"user\",\"type\": \"address\"},{\"internalType\": \"string\",\"name\": \"payment_provider\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"payment_account\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"meta\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"memo\",\"type\": \"string\"}],\"internalType\": \"struct RumAccount.Account[]\",\"name\": \"\",\"type\": \"tuple[]\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"},{\"constant\": true,\"inputs\": [{\"internalType\": \"string\",\"name\": \"payment_provider\",\"type\": \"string\"}],\"name\": \"providerUsersCount\",\"outputs\": [{\"internalType\": \"uint256\",\"name\": \"\",\"type\": \"uint256\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"}]}","abiRumSC.json":"{\"address\": \"0x13521ED10784455994B63E47329bc55cc005afbB\",\"abi\": [{\"anonymous\": false,\"inputs\": [{\"indexed\": false,\"internalType\": \"string\",\"name\": \"id\",\"type\": \"string\"},{\"indexed\": false,\"internalType\": \"string\",\"name\": \"user_address\",\"type\": \"string\"},{\"indexed\": true,\"internalType\": \"string\",\"name\": \"protocol\",\"type\": \"string\"},{\"indexed\": false,\"internalType\": \"string\",\"name\": \"meta\",\"type\": \"string\"},{\"indexed\": false,\"internalType\": \"string\",\"name\": \"data\",\"type\": \"string\"},{\"indexed\": false,\"internalType\": \"string\",\"name\": \"hash\",\"type\": \"string\"},{\"indexed\": false,\"internalType\": \"string\",\"name\": \"signature\",\"type\": \"string\"}],\"name\": \"NewPost\",\"type\": \"event\"},{\"constant\": true,\"inputs\": [{\"internalType\": \"uint256\",\"name\": \"\",\"type\": \"uint256\"}],\"name\": \"posts\",\"outputs\": [{\"internalType\": \"string\",\"name\": \"id\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"user_address\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"protocol\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"meta\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"data\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"hash\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"signature\",\"type\": \"string\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"},{\"constant\": false,\"inputs\": [{\"internalType\": \"string\",\"name\": \"id\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"user_address\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"protocol\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"meta\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"data\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"hash\",\"type\": \"string\"},{\"internalType\": \"string\",\"name\": \"signature\",\"type\": \"string\"}],\"name\": \"save\",\"outputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"constant\": true,\"inputs\": [],\"name\": \"getLength\",\"outputs\": [{\"internalType\": \"uint256\",\"name\": \"\",\"type\": \"uint256\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"}]}","protoActivityStream.json":"{\"nested\": {\"quorum\": {\"nested\": {\"pb\": {\"options\": {\"go_package\": \"github.com/rumsystem/quorum/internal/pkg/pb\"},\"nested\": {\"AnyObj\": {\"fields\": {\"any\": {\"type\": \"google.protobuf.Any\",\"id\": 1}}},\"Object\": {\"fields\": {\"id\": {\"type\": \"string\",\"id\": 1},\"type\": {\"type\": \"string\",\"id\": 2},\"attachments\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 3},\"attributedTo\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 4},\"audience\": {\"type\": \"Object\",\"id\": 5},\"content\": {\"type\": \"string\",\"id\": 6},\"context\": {\"type\": \"Object\",\"id\": 7},\"name\": {\"type\": \"string\",\"id\": 8},\"endtime\": {\"type\": \"google.protobuf.Timestamp\",\"id\": 9},\"generator\": {\"type\": \"Object\",\"id\": 10},\"icon\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 11},\"image\": {\"rule\": \"repeated\",\"type\": \"Image\",\"id\": 12},\"inreplyto\": {\"type\": \"Reply\",\"id\": 13},\"location\": {\"type\": \"Object\",\"id\": 14},\"preview\": {\"type\": \"Object\",\"id\": 15},\"published\": {\"type\": \"google.protobuf.Timestamp\",\"id\": 16},\"replies\": {\"type\": \"Object\",\"id\": 17},\"startTime\": {\"type\": \"google.protobuf.Timestamp\",\"id\": 18},\"summary\": {\"type\": \"string\",\"id\": 19},\"tag\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 20},\"updated\": {\"type\": \"google.protobuf.Timestamp\",\"id\": 21},\"url\": {\"rule\": \"repeated\",\"type\": \"Link\",\"id\": 22},\"to\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 23},\"bto\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 24},\"cc\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 25},\"bcc\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 26},\"mediaType\": {\"type\": \"string\",\"id\": 27},\"duration\": {\"type\": \"string\",\"id\": 28}}},\"Link\": {\"fields\": {\"href\": {\"type\": \"string\",\"id\": 1},\"rel\": {\"rule\": \"repeated\",\"type\": \"string\",\"id\": 2},\"mediaType\": {\"type\": \"string\",\"id\": 3},\"name\": {\"type\": \"string\",\"id\": 4},\"hreflang\": {\"type\": \"string\",\"id\": 5},\"height\": {\"type\": \"uint32\",\"id\": 6},\"width\": {\"type\": \"uint32\",\"id\": 7},\"preview\": {\"type\": \"Object\",\"id\": 8}}},\"Reply\": {\"fields\": {\"trxid\": {\"type\": \"string\",\"id\": 1},\"groupid\": {\"type\": \"string\",\"id\": 2}}},\"Image\": {\"fields\": {\"id\": {\"type\": \"string\",\"id\": 1},\"name\": {\"type\": \"string\",\"id\": 2},\"mediaType\": {\"type\": \"string\",\"id\": 3},\"content\": {\"type\": \"bytes\",\"id\": 4},\"url\": {\"type\": \"string\",\"id\": 5}}},\"Person\": {\"fields\": {\"id\": {\"type\": \"string\",\"id\": 1},\"name\": {\"type\": \"string\",\"id\": 2},\"image\": {\"type\": \"Image\",\"id\": 3},\"wallet\": {\"rule\": \"repeated\",\"type\": \"Payment\",\"id\": 11}}},\"Payment\": {\"fields\": {\"id\": {\"type\": \"string\",\"id\": 1},\"type\": {\"type\": \"string\",\"id\": 2},\"name\": {\"type\": \"string\",\"id\": 3}}},\"Activity\": {\"fields\": {\"id\": {\"type\": \"string\",\"id\": 1},\"type\": {\"type\": \"string\",\"id\": 2},\"attachments\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 3},\"attributedTo\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 4},\"audience\": {\"type\": \"Object\",\"id\": 5},\"content\": {\"type\": \"string\",\"id\": 6},\"context\": {\"type\": \"Object\",\"id\": 7},\"name\": {\"type\": \"string\",\"id\": 8},\"endtime\": {\"type\": \"google.protobuf.Timestamp\",\"id\": 9},\"generator\": {\"type\": \"Object\",\"id\": 10},\"icon\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 11},\"image\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 12},\"inReplyTo\": {\"type\": \"Object\",\"id\": 13},\"location\": {\"type\": \"Object\",\"id\": 14},\"preview\": {\"type\": \"Object\",\"id\": 15},\"published\": {\"type\": \"google.protobuf.Timestamp\",\"id\": 16},\"replies\": {\"type\": \"Object\",\"id\": 17},\"startTime\": {\"type\": \"google.protobuf.Timestamp\",\"id\": 18},\"summary\": {\"type\": \"string\",\"id\": 19},\"tag\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 20},\"updated\": {\"type\": \"google.protobuf.Timestamp\",\"id\": 21},\"url\": {\"rule\": \"repeated\",\"type\": \"Link\",\"id\": 22},\"to\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 23},\"bto\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 24},\"cc\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 25},\"bcc\": {\"rule\": \"repeated\",\"type\": \"Object\",\"id\": 26},\"mediaType\": {\"type\": \"string\",\"id\": 27},\"duration\": {\"type\": \"string\",\"id\": 28},\"actor\": {\"type\": \"Object\",\"id\": 29},\"object\": {\"type\": \"Object\",\"id\": 30},\"target\": {\"type\": \"Object\",\"id\": 31},\"result\": {\"type\": \"Object\",\"id\": 32},\"origin\": {\"type\": \"Object\",\"id\": 33},\"instrument\": {\"type\": \"Object\",\"id\": 34},\"person\": {\"type\": \"Person\",\"id\": 35}}}}}}},\"google\": {\"nested\": {\"protobuf\": {\"nested\": {\"Timestamp\": {\"fields\": {\"seconds\": {\"type\": \"int64\",\"id\": 1},\"nanos\": {\"type\": \"int32\",\"id\": 2}}},\"Any\": {\"fields\": {\"type_url\": {\"type\": \"string\",\"id\": 1},\"value\": {\"type\": \"bytes\",\"id\": 2}}}}}}}}}","protoChain.json":"{\"nested\": {\"quorum\": {\"nested\": {\"pb\": {\"options\": {\"go_package\": \"github.com/rumsystem/quorum/internal/pkg/pb\"},\"nested\": {\"PackageType\": {\"values\": {\"TRX\": 0,\"BLOCK\": 1}},\"Package\": {\"fields\": {\"type\": {\"type\": \"PackageType\",\"id\": 1},\"Data\": {\"type\": \"bytes\",\"id\": 2}}},\"TrxType\": {\"values\": {\"POST\": 0,\"AUTH\": 1,\"SCHEMA\": 2,\"PRODUCER\": 3,\"ANNOUNCE\": 4,\"REQ_BLOCK_FORWARD\": 5,\"REQ_BLOCK_BACKWARD\": 6,\"REQ_BLOCK_RESP\": 7,\"BLOCK_SYNCED\": 8,\"BLOCK_PRODUCED\": 9}},\"AnnounceType\": {\"values\": {\"AS_USER\": 0,\"AS_PRODUCER\": 1}},\"ApproveType\": {\"values\": {\"ANNOUCNED\": 0,\"APPROVED\": 1,\"REJECTED\": 2}},\"ActionType\": {\"values\": {\"ADD\": 0,\"REMOVE\": 1}},\"Trx\": {\"fields\": {\"TrxId\": {\"type\": \"string\",\"id\": 1},\"Type\": {\"type\": \"TrxType\",\"id\": 2},\"GroupId\": {\"type\": \"string\",\"id\": 3},\"Data\": {\"type\": \"bytes\",\"id\": 4},\"TimeStamp\": {\"type\": \"int64\",\"id\": 5},\"Version\": {\"type\": \"string\",\"id\": 6},\"Expired\": {\"type\": \"int64\",\"id\": 7},\"ResendCount\": {\"type\": \"int64\",\"id\": 8},\"Nonce\": {\"type\": \"int64\",\"id\": 9},\"SenderPubkey\": {\"type\": \"string\",\"id\": 10},\"SenderSign\": {\"type\": \"bytes\",\"id\": 11}}},\"Block\": {\"fields\": {\"BlockId\": {\"type\": \"string\",\"id\": 1},\"GroupId\": {\"type\": \"string\",\"id\": 2},\"PrevBlockId\": {\"type\": \"string\",\"id\": 3},\"PreviousHash\": {\"type\": \"bytes\",\"id\": 4},\"Trxs\": {\"rule\": \"repeated\",\"type\": \"Trx\",\"id\": 5},\"ProducerPubKey\": {\"type\": \"string\",\"id\": 6},\"Hash\": {\"type\": \"bytes\",\"id\": 7},\"Signature\": {\"type\": \"bytes\",\"id\": 8},\"TimeStamp\": {\"type\": \"int64\",\"id\": 9}}},\"BlockDbChunk\": {\"fields\": {\"BlockId\": {\"type\": \"string\",\"id\": 1},\"BlockItem\": {\"type\": \"Block\",\"id\": 2},\"ParentBlockId\": {\"type\": \"string\",\"id\": 3},\"SubBlockId\": {\"rule\": \"repeated\",\"type\": \"string\",\"id\": 4},\"Height\": {\"type\": \"int64\",\"id\": 6}}},\"ReqBlock\": {\"fields\": {\"BlockId\": {\"type\": \"string\",\"id\": 1},\"GroupId\": {\"type\": \"string\",\"id\": 2},\"UserId\": {\"type\": \"string\",\"id\": 3}}},\"BlockSynced\": {\"fields\": {\"BlockItem\": {\"type\": \"Block\",\"id\": 1}}},\"BlockProduced\": {\"fields\": {\"BlockItem\": {\"type\": \"Block\",\"id\": 1}}},\"ReqBlkResult\": {\"values\": {\"BLOCK_IN_TRX\": 0,\"BLOCK_NOT_FOUND\": 1}},\"ReqBlockResp\": {\"fields\": {\"Result\": {\"type\": \"ReqBlkResult\",\"id\": 1},\"ProviderPubkey\": {\"type\": \"string\",\"id\": 2},\"RequesterPubkey\": {\"type\": \"string\",\"id\": 3},\"GroupId\": {\"type\": \"string\",\"id\": 4},\"BlockId\": {\"type\": \"string\",\"id\": 5},\"Block\": {\"type\": \"bytes\",\"id\": 6}}},\"PostItem\": {\"fields\": {\"TrxId\": {\"type\": \"string\",\"id\": 1},\"PublisherPubkey\": {\"type\": \"string\",\"id\": 2},\"Content\": {\"type\": \"bytes\",\"id\": 3},\"TimeStamp\": {\"type\": \"int64\",\"id\": 4}}},\"DenyUserItem\": {\"fields\": {\"GroupId\": {\"type\": \"string\",\"id\": 1},\"PeerId\": {\"type\": \"string\",\"id\": 2},\"GroupOwnerPubkey\": {\"type\": \"string\",\"id\": 3},\"GroupOwnerSign\": {\"type\": \"string\",\"id\": 4},\"TimeStamp\": {\"type\": \"int64\",\"id\": 5},\"Action\": {\"type\": \"string\",\"id\": 6},\"Memo\": {\"type\": \"string\",\"id\": 7}}},\"ProducerItem\": {\"fields\": {\"GroupId\": {\"type\": \"string\",\"id\": 1},\"ProducerPubkey\": {\"type\": \"string\",\"id\": 2},\"GroupOwnerPubkey\": {\"type\": \"string\",\"id\": 3},\"GroupOwnerSign\": {\"type\": \"string\",\"id\": 4},\"TimeStamp\": {\"type\": \"int64\",\"id\": 5},\"Action\": {\"type\": \"ActionType\",\"id\": 6},\"BlockProduced\": {\"type\": \"int64\",\"id\": 7},\"Memo\": {\"type\": \"string\",\"id\": 8}}},\"AnnounceItem\": {\"fields\": {\"GroupId\": {\"type\": \"string\",\"id\": 1},\"SignPubkey\": {\"type\": \"string\",\"id\": 2},\"EncryptPubkey\": {\"type\": \"string\",\"id\": 3},\"AnnouncerSignature\": {\"type\": \"string\",\"id\": 4},\"Type\": {\"type\": \"AnnounceType\",\"id\": 5},\"OwnerPubkey\": {\"type\": \"string\",\"id\": 6},\"OwnerSignature\": {\"type\": \"string\",\"id\": 7},\"Result\": {\"type\": \"ApproveType\",\"id\": 8},\"TimeStamp\": {\"type\": \"int64\",\"id\": 9},\"Action\": {\"type\": \"ActionType\",\"id\": 10}}},\"SchemaItem\": {\"fields\": {\"GroupId\": {\"type\": \"string\",\"id\": 1},\"SchemaJson\": {\"type\": \"string\",\"id\": 2},\"GroupOwnerPubkey\": {\"type\": \"string\",\"id\": 3},\"GroupOwnerSign\": {\"type\": \"string\",\"id\": 4},\"TimeStamp\": {\"type\": \"int64\",\"id\": 5},\"Memo\": {\"type\": \"string\",\"id\": 6}}},\"GroupEncryptType\": {\"values\": {\"PUBLIC\": 0,\"PRIVATE\": 1}},\"GroupConsenseType\": {\"values\": {\"POA\": 0,\"POS\": 1}},\"GroupItem\": {\"fields\": {\"GroupId\": {\"type\": \"string\",\"id\": 1},\"GroupName\": {\"type\": \"string\",\"id\": 2},\"OwnerPubKey\": {\"type\": \"string\",\"id\": 3},\"UserSignPubkey\": {\"type\": \"string\",\"id\": 4},\"UserEncryptPubkey\": {\"type\": \"string\",\"id\": 5},\"LastUpdate\": {\"type\": \"int64\",\"id\": 6},\"HighestHeight\": {\"type\": \"int64\",\"id\": 7},\"HighestBlockId\": {\"type\": \"string\",\"id\": 8},\"GenesisBlock\": {\"type\": \"Block\",\"id\": 9},\"EncryptType\": {\"type\": \"GroupEncryptType\",\"id\": 10},\"ConsenseType\": {\"type\": \"GroupConsenseType\",\"id\": 11},\"CipherKey\": {\"type\": \"string\",\"id\": 12},\"AppKey\": {\"type\": \"string\",\"id\": 13}}},\"PSPing\": {\"fields\": {\"Seqnum\": {\"type\": \"int32\",\"id\": 1},\"IsResp\": {\"type\": \"bool\",\"id\": 2},\"TimeStamp\": {\"type\": \"int64\",\"id\": 3},\"Payload\": {\"type\": \"bytes\",\"id\": 4}}}}}}}}}","solRumERC20.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract RumERC20 is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 cap,\n        address minter\n    ) ERC20(name, symbol) {\n        // send all supply to minter\n        _mint(minter, cap);\n    }\n}\n","abiRumERC20.json":"{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]}","@openzeppelin/contracts/token/ERC20/ERC20.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\npragma solidity ^0.8.0;\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n/**\n* @dev Implementation of the {IERC20} interface.\n*\n* This implementation is agnostic to the way tokens are created. This means\n* that a supply mechanism has to be added in a derived contract using {_mint}.\n* For a generic mechanism see {ERC20PresetMinterPauser}.\n*\n* TIP: For a detailed writeup see our guide\n* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n* to implement supply mechanisms].\n*\n* We have followed general OpenZeppelin Contracts guidelines: functions revert\n* instead returning `false` on failure. This behavior is nonetheless\n* conventional and does not conflict with the expectations of ERC20\n* applications.\n*\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n* This allows applications to reconstruct the allowance for all accounts just\n* by listening to said events. Other implementations of the EIP may not emit\n* these events, as it isn't required by the specification.\n*\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n* functions have been added to mitigate the well-known issues around setting\n* allowances. See {IERC20-approve}.\n*/\ncontract ERC20 is Context, IERC20, IERC20Metadata {\nmapping(address => uint256) private _balances;\nmapping(address => mapping(address => uint256)) private _allowances;\nuint256 private _totalSupply;\nstring private _name;\nstring private _symbol;\n/**\n* @dev Sets the values for {name} and {symbol}.\n*\n* The default value of {decimals} is 18. To select a different value for\n* {decimals} you should overload it.\n*\n* All two of these values are immutable: they can only be set once during\n* construction.\n*/\nconstructor(string memory name_, string memory symbol_) {\n_name = name_;\n_symbol = symbol_;\n}\n/**\n* @dev Returns the name of the token.\n*/\nfunction name() public view virtual override returns (string memory) {\nreturn _name;\n}\n/**\n* @dev Returns the symbol of the token, usually a shorter version of the\n* name.\n*/\nfunction symbol() public view virtual override returns (string memory) {\nreturn _symbol;\n}\n/**\n* @dev Returns the number of decimals used to get its user representation.\n* For example, if `decimals` equals `2`, a balance of `505` tokens should\n* be displayed to a user as `5.05` (`505 / 10 ** 2`).\n*\n* Tokens usually opt for a value of 18, imitating the relationship between\n* Ether and Wei. This is the value {ERC20} uses, unless this function is\n* overridden;\n*\n* NOTE: This information is only used for _display_ purposes: it in\n* no way affects any of the arithmetic of the contract, including\n* {IERC20-balanceOf} and {IERC20-transfer}.\n*/\nfunction decimals() public view virtual override returns (uint8) {\nreturn 18;\n}\n/**\n* @dev See {IERC20-totalSupply}.\n*/\nfunction totalSupply() public view virtual override returns (uint256) {\nreturn _totalSupply;\n}\n/**\n* @dev See {IERC20-balanceOf}.\n*/\nfunction balanceOf(address account) public view virtual override returns (uint256) {\nreturn _balances[account];\n}\n/**\n* @dev See {IERC20-transfer}.\n*\n* Requirements:\n*\n* - `recipient` cannot be the zero address.\n* - the caller must have a balance of at least `amount`.\n*/\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n_transfer(_msgSender(), recipient, amount);\nreturn true;\n}\n/**\n* @dev See {IERC20-allowance}.\n*/\nfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\nreturn _allowances[owner][spender];\n}\n/**\n* @dev See {IERC20-approve}.\n*\n* Requirements:\n*\n* - `spender` cannot be the zero address.\n*/\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\n_approve(_msgSender(), spender, amount);\nreturn true;\n}\n/**\n* @dev See {IERC20-transferFrom}.\n*\n* Emits an {Approval} event indicating the updated allowance. This is not\n* required by the EIP. See the note at the beginning of {ERC20}.\n*\n* Requirements:\n*\n* - `sender` and `recipient` cannot be the zero address.\n* - `sender` must have a balance of at least `amount`.\n* - the caller must have allowance for ``sender``'s tokens of at least\n* `amount`.\n*/\nfunction transferFrom(\naddress sender,\naddress recipient,\nuint256 amount\n) public virtual override returns (bool) {\n_transfer(sender, recipient, amount);\nuint256 currentAllowance = _allowances[sender][_msgSender()];\nrequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\nunchecked {\n_approve(sender, _msgSender(), currentAllowance - amount);\n}\nreturn true;\n}\n/**\n* @dev Atomically increases the allowance granted to `spender` by the caller.\n*\n* This is an alternative to {approve} that can be used as a mitigation for\n* problems described in {IERC20-approve}.\n*\n* Emits an {Approval} event indicating the updated allowance.\n*\n* Requirements:\n*\n* - `spender` cannot be the zero address.\n*/\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\nreturn true;\n}\n/**\n* @dev Atomically decreases the allowance granted to `spender` by the caller.\n*\n* This is an alternative to {approve} that can be used as a mitigation for\n* problems described in {IERC20-approve}.\n*\n* Emits an {Approval} event indicating the updated allowance.\n*\n* Requirements:\n*\n* - `spender` cannot be the zero address.\n* - `spender` must have allowance for the caller of at least\n* `subtractedValue`.\n*/\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\nuint256 currentAllowance = _allowances[_msgSender()][spender];\nrequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\nunchecked {\n_approve(_msgSender(), spender, currentAllowance - subtractedValue);\n}\nreturn true;\n}\n/**\n* @dev Moves `amount` of tokens from `sender` to `recipient`.\n*\n* This internal function is equivalent to {transfer}, and can be used to\n* e.g. implement automatic token fees, slashing mechanisms, etc.\n*\n* Emits a {Transfer} event.\n*\n* Requirements:\n*\n* - `sender` cannot be the zero address.\n* - `recipient` cannot be the zero address.\n* - `sender` must have a balance of at least `amount`.\n*/\nfunction _transfer(\naddress sender,\naddress recipient,\nuint256 amount\n) internal virtual {\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n_beforeTokenTransfer(sender, recipient, amount);\nuint256 senderBalance = _balances[sender];\nrequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\nunchecked {\n_balances[sender] = senderBalance - amount;\n}\n_balances[recipient] += amount;\nemit Transfer(sender, recipient, amount);\n_afterTokenTransfer(sender, recipient, amount);\n}\n/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n* the total supply.\n*\n* Emits a {Transfer} event with `from` set to the zero address.\n*\n* Requirements:\n*\n* - `account` cannot be the zero address.\n*/\nfunction _mint(address account, uint256 amount) internal virtual {\nrequire(account != address(0), \"ERC20: mint to the zero address\");\n_beforeTokenTransfer(address(0), account, amount);\n_totalSupply += amount;\n_balances[account] += amount;\nemit Transfer(address(0), account, amount);\n_afterTokenTransfer(address(0), account, amount);\n}\n/**\n* @dev Destroys `amount` tokens from `account`, reducing the\n* total supply.\n*\n* Emits a {Transfer} event with `to` set to the zero address.\n*\n* Requirements:\n*\n* - `account` cannot be the zero address.\n* - `account` must have at least `amount` tokens.\n*/\nfunction _burn(address account, uint256 amount) internal virtual {\nrequire(account != address(0), \"ERC20: burn from the zero address\");\n_beforeTokenTransfer(account, address(0), amount);\nuint256 accountBalance = _balances[account];\nrequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\nunchecked {\n_balances[account] = accountBalance - amount;\n}\n_totalSupply -= amount;\nemit Transfer(account, address(0), amount);\n_afterTokenTransfer(account, address(0), amount);\n}\n/**\n* @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n*\n* This internal function is equivalent to `approve`, and can be used to\n* e.g. set automatic allowances for certain subsystems, etc.\n*\n* Emits an {Approval} event.\n*\n* Requirements:\n*\n* - `owner` cannot be the zero address.\n* - `spender` cannot be the zero address.\n*/\nfunction _approve(\naddress owner,\naddress spender,\nuint256 amount\n) internal virtual {\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\n_allowances[owner][spender] = amount;\nemit Approval(owner, spender, amount);\n}\n/**\n* @dev Hook that is called before any transfer of tokens. This includes\n* minting and burning.\n*\n* Calling conditions:\n*\n* - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n* will be transferred to `to`.\n* - when `from` is zero, `amount` tokens will be minted for `to`.\n* - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n* - `from` and `to` are never both zero.\n*\n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n*/\nfunction _beforeTokenTransfer(\naddress from,\naddress to,\nuint256 amount\n) internal virtual {}\n/**\n* @dev Hook that is called after any transfer of tokens. This includes\n* minting and burning.\n*\n* Calling conditions:\n*\n* - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n* has been transferred to `to`.\n* - when `from` is zero, `amount` tokens have been minted for `to`.\n* - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n* - `from` and `to` are never both zero.\n*\n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n*/\nfunction _afterTokenTransfer(\naddress from,\naddress to,\nuint256 amount\n) internal virtual {}\n}","@openzeppelin/contracts/token/ERC20/IERC20.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\npragma solidity ^0.8.0;\n/**\n* @dev Interface of the ERC20 standard as defined in the EIP.\n*/\ninterface IERC20 {\n/**\n* @dev Returns the amount of tokens in existence.\n*/\nfunction totalSupply() external view returns (uint256);\n/**\n* @dev Returns the amount of tokens owned by `account`.\n*/\nfunction balanceOf(address account) external view returns (uint256);\n/**\n* @dev Moves `amount` tokens from the caller's account to `recipient`.\n*\n* Returns a boolean value indicating whether the operation succeeded.\n*\n* Emits a {Transfer} event.\n*/\nfunction transfer(address recipient, uint256 amount) external returns (bool);\n/**\n* @dev Returns the remaining number of tokens that `spender` will be\n* allowed to spend on behalf of `owner` through {transferFrom}. This is\n* zero by default.\n*\n* This value changes when {approve} or {transferFrom} are called.\n*/\nfunction allowance(address owner, address spender) external view returns (uint256);\n/**\n* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n*\n* Returns a boolean value indicating whether the operation succeeded.\n*\n* IMPORTANT: Beware that changing an allowance with this method brings the risk\n* that someone may use both the old and the new allowance by unfortunate\n* transaction ordering. One possible solution to mitigate this race\n* condition is to first reduce the spender's allowance to 0 and set the\n* desired value afterwards:\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n*\n* Emits an {Approval} event.\n*/\nfunction approve(address spender, uint256 amount) external returns (bool);\n/**\n* @dev Moves `amount` tokens from `sender` to `recipient` using the\n* allowance mechanism. `amount` is then deducted from the caller's\n* allowance.\n*\n* Returns a boolean value indicating whether the operation succeeded.\n*\n* Emits a {Transfer} event.\n*/\nfunction transferFrom(\naddress sender,\naddress recipient,\nuint256 amount\n) external returns (bool);\n/**\n* @dev Emitted when `value` tokens are moved from one account (`from`) to\n* another (`to`).\n*\n* Note that `value` may be zero.\n*/\nevent Transfer(address indexed from, address indexed to, uint256 value);\n/**\n* @dev Emitted when the allowance of a `spender` for an `owner` is set by\n* a call to {approve}. `value` is the new allowance.\n*/\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n}","@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\npragma solidity ^0.8.0;\nimport \"../IERC20.sol\";\n/**\n* @dev Interface for the optional metadata functions from the ERC20 standard.\n*\n* _Available since v4.1._\n*/\ninterface IERC20Metadata is IERC20 {\n/**\n* @dev Returns the name of the token.\n*/\nfunction name() external view returns (string memory);\n/**\n* @dev Returns the symbol of the token.\n*/\nfunction symbol() external view returns (string memory);\n/**\n* @dev Returns the decimals places of the token.\n*/\nfunction decimals() external view returns (uint8);\n}","@openzeppelin/contracts/utils/Context.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\npragma solidity ^0.8.0;\n/**\n* @dev Provides information about the current execution context, including the\n* sender of the transaction and its data. While these are generally available\n* via msg.sender and msg.data, they should not be accessed in such a direct\n* manner, since when dealing with meta-transactions the account sending and\n* paying for execution may not be the actual sender (as far as an application\n* is concerned).\n*\n* This contract is only required for intermediate, library-like contracts.\n*/\nabstract contract Context {\nfunction _msgSender() internal view virtual returns (address) {\nreturn msg.sender;\n}\nfunction _msgData() internal view virtual returns (bytes calldata) {\nreturn msg.data;\n}\n}"}